 AS V1.42 Beta [Bld 246] - Source File multi_digit_arithmetic_test.s - Page 1 - 02-08-23 22:07:20


       1/       0 : 40 4B                       JUN START
       2/       2 :                     
       3/       2 : 41 6F               FAIL2   JUN FAIL        ; needs to cross page boundary
       4/       4 :                     
       5/       4 :                     ; From MCS-4 assembly manual, 4-14
       6/       4 :                     ; Multi digit addition of data RAM 0 regs 0 and 1
       7/       4 :                     ; Input and results are in reverse order (least significant bit first)
       8/       4 :                     ; Destroys data RAM 0 reg 1, index regs 4, 5, 6, 7, 8
       9/       4 : 24 00               AD      FIM R4R5, 0     ; Reg pair 2P = reg 0 of RAM chip 0
      10/       6 : 26 10                       FIM R6R7, 16    ; Reg pair 3P = reg 1 of RAM chip 0
      11/       8 : F0                          CLB             ; Set carry = 0
      12/       9 : B8                          XCH R8          ; Set digit counter = 0
      13/       A : 25                  AD1     SRC R4R5        ; Select RAM reg 0
      14/       B : E9                          RDM             ; Read digit to accumulator
      15/       C : 27                          SRC R6R7        ; Select RAM reg 1
      16/       D : EB                          ADM             ; Add digit + carry to accumulator
      17/       E : E0                          WRM             ; Write result to reg 1
      18/       F : 65                          INC R5          ; Address next char. of RAM reg 0
      19/      10 : 67                          INC R7          ; Address next char. of RAM reg 1
      20/      11 : 78 0A                       ISZ R8, AD1     ; Branch if digit counter < 16 (non zero)
      21/      13 : C0                          BBL 0
      22/      14 :                     
      23/      14 :                     ; From MCS-4 assembly manual, 4-17
      24/      14 :                     ; Multi digit subtraction of data RAM 0 regs 0 and 1
      25/      14 :                     ; Input and results are in reverse order (least significant bit first)
      26/      14 :                     ; Destroys data RAM 0 reg 1, index regs 4, 5, 6, 7, 8
      27/      14 : 24 00               SB      FIM R4R5, 0     ; Reg pair 2P = reg 0 of RAM chip 0
      28/      16 : 26 10                       FIM R6R7, 16    ; Reg pair 3P = reg 1 of RAM chip 0
      29/      18 : F0                          CLB
      30/      19 : B8                          XCH R8          ; Set digit counter = 0
      31/      1A : FA                          STC             ; Set carry = 1
      32/      1B : F3                  SB1     CMC             ; Complement carry bit
      33/      1C : 25                          SRC R4R5        ; Select RAM reg 0
      34/      1D : E9                          RDM             ; Read digit to accumulator
      35/      1E : 27                          SRC R6R7        ; Select RAM reg 1
      36/      1F : E8                          SBM             ; Subtract digit and carry from accumulator
      37/      20 : E0                          WRM             ; Write result to reg 1
      38/      21 : 65                          INC R5          ; Address next char. of RAM reg 0
      39/      22 : 67                          INC R7          ; Address next char. of RAM reg 1
      40/      23 : 78 1B                       ISZ R8, SB1     ; Branch if digit counter < 16 (non zero)
      41/      25 : C0                          BBL 0
      42/      26 :                     
      43/      26 :                     ; From MCS-4 assembly manual, 4-14, adapted with DAA instruction
      44/      26 :                     ; Multi digit decimal addition of data RAM 0 regs 0 and 1
      45/      26 :                     ; Input and results are in reverse order (least significant bit first)
      46/      26 :                     ; Destroys data RAM 0 reg 1, index regs 4, 5, 6, 7, 8
      47/      26 : 24 00               ADD     FIM R4R5, 0     ; Reg pair 2P = reg 0 of RAM chip 0
      48/      28 : 26 10                       FIM R6R7, 16    ; Reg pair 3P = reg 1 of RAM chip 0
      49/      2A : F0                          CLB             ; Set carry = 0
      50/      2B : B8                          XCH R8          ; Set digit counter = 0
      51/      2C : 25                  ADD1    SRC R4R5        ; Select RAM reg 0
      52/      2D : E9                          RDM             ; Read digit to accumulator
      53/      2E : 27                          SRC R6R7        ; Select RAM reg 1
      54/      2F : EB                          ADM             ; Add digit + carry to accumulator
      55/      30 : FB                          DAA             ; Decimal adjust
      56/      31 : E0                          WRM             ; Write result to reg 1
      57/      32 : 65                          INC R5          ; Address next char. of RAM reg 0
      58/      33 : 67                          INC R7          ; Address next char. of RAM reg 1
      59/      34 : 78 2C                       ISZ R8, ADD1    ; Branch if digit counter < 16 (non zero)
      60/      36 : C0                          BBL 0
 AS V1.42 Beta [Bld 246] - Source File multi_digit_arithmetic_test.s - Page 2 - 02-08-23 22:07:20


      61/      37 :                     
      62/      37 :                     ; From MCS-4 assembly manual, 4-23
      63/      37 :                     ; Multi digit decimal subtraction of data RAM 0 regs 0 and 1
      64/      37 :                     ; Input and results are in reverse order (least significant bit first)
      65/      37 :                     ; Destroys data RAM 0 reg 0, index regs 4, 5, 6, 7, 8
      66/      37 : 24 00               SBD     FIM R4R5, 0     ; Reg pair 2P = reg 0 of RAM chip 0
      67/      39 : 26 10                       FIM R6R7, 16    ; Reg pair 3P = reg 1 of RAM chip 0
      68/      3B : F0                          CLB
      69/      3C : B8                          XCH R8          ; Set digit counter = 0
      70/      3D : FA                          STC             ; Set carry = 1
      71/      3E : F9                  SBD1    TCS             ; Accumulator = 9 or 10
      72/      3F : 27                          SRC R6R7        ; Select RAM reg 1
      73/      40 : E8                          SBM             ; Produce 9's or 10's complement
      74/      41 : F1                          CLC             ; Set carry = 0
      75/      42 : 25                          SRC R4R5        ; Select RAM reg 0
      76/      43 : EB                          ADM             ; Add minuend to accumulator
      77/      44 : FB                          DAA             ; Adjust accumulator
      78/      45 : E0                          WRM             ; Write result to reg 0
      79/      46 : 65                          INC R5          ; Address next char. of RAM reg 0
      80/      47 : 67                          INC R7          ; Address next char. of RAM reg 1
      81/      48 : 78 3E                       ISZ R8, SBD1     ; Branch if digit counter < 16 (non zero)
      82/      4A : C0                          BBL 0
      83/      4B :                     
      84/      4B : D2                  START   LDM 2
      85/      4C : FD                          DCL             ; Select RAM bank 2
      86/      4D :                     
      87/      4D :                             ; Binary arithmetic test
      88/      4D :                                             ; load 241233 = 3AE51H in reverse order in reg 0
      89/      4D : 20 00                       FIM R0R1, 0
      90/      4F : 21                          SRC R0R1        ; Select reg 0, char 0 of RAM chip 0
      91/      50 : D1                          LDM 1
      92/      51 : E0                          WRM
      93/      52 : 61                          INC R1
      94/      53 : 21                          SRC R0R1        ; next character
      95/      54 : D5                          LDM 5
      96/      55 : E0                          WRM
      97/      56 : 61                          INC R1
      98/      57 : 21                          SRC R0R1
      99/      58 : DE                          LDM 0EH
     100/      59 : E0                          WRM
     101/      5A : 61                          INC R1
     102/      5B : 21                          SRC R0R1
     103/      5C : DA                          LDM 0AH
     104/      5D : E0                          WRM
     105/      5E : 61                          INC R1
     106/      5F : 21                          SRC R0R1
     107/      60 : D3                          LDM 3
     108/      61 : E0                          WRM
     109/      62 :                     
     110/      62 :                                             ; load 3538 = DD2H in reverse order in reg 0
     111/      62 : 20 10                       FIM R0R1, 16
     112/      64 : 21                          SRC R0R1        ; Select reg 1, char 0 of RAM chip 0
     113/      65 : D2                          LDM 2
     114/      66 : E0                          WRM
     115/      67 : 61                          INC R1
     116/      68 : 21                          SRC R0R1        ; next character
     117/      69 : DD                          LDM 0DH
     118/      6A : E0                          WRM
     119/      6B : 61                          INC R1
     120/      6C : 21                          SRC R0R1
 AS V1.42 Beta [Bld 246] - Source File multi_digit_arithmetic_test.s - Page 3 - 02-08-23 22:07:20


     121/      6D : DD                          LDM 0DH
     122/      6E : E0                          WRM
     123/      6F :                     
     124/      6F : 50 04                       JMS AD          ; 241233 + 3538 = 244771 = 3BC23H
     125/      71 :                     
     126/      71 :                                             ; read the answer in reg 1 of RAM chip 0 and check each character
     127/      71 : 20 10                       FIM R0R1, 16
     128/      73 : 21                          SRC R0R1
     129/      74 : D3                          LDM 3
     130/      75 : F1                          CLC
     131/      76 : E8                          SBM
     132/      77 : 1C 02                       JCN 12, FAIL2   ; fail if accumulator != 0 (not equal to number)
     133/      79 :                     
     134/      79 : 61                          INC R1
     135/      7A : 21                          SRC R0R1
     136/      7B : D2                          LDM 2
     137/      7C : F1                          CLC
     138/      7D : E8                          SBM
     139/      7E : 1C 02                       JCN 12, FAIL2   ; fail if accumulator != 0 (not equal to number)
     140/      80 :                     
     141/      80 : 61                          INC R1
     142/      81 : 21                          SRC R0R1
     143/      82 : DC                          LDM 0CH
     144/      83 : F1                          CLC
     145/      84 : E8                          SBM
     146/      85 : 1C 02                       JCN 12, FAIL2   ; fail if accumulator != 0 (not equal to number)
     147/      87 :                     
     148/      87 : 61                          INC R1
     149/      88 : 21                          SRC R0R1
     150/      89 : DB                          LDM 0BH
     151/      8A : F1                          CLC
     152/      8B : E8                          SBM
     153/      8C : 1C 02                       JCN 12, FAIL2   ; fail if accumulator != 0 (not equal to number)
     154/      8E :                     
     155/      8E : 61                          INC R1
     156/      8F : 21                          SRC R0R1
     157/      90 : D3                          LDM 3
     158/      91 : F1                          CLC
     159/      92 : E8                          SBM
     160/      93 : 1C 02                       JCN 12, FAIL2   ; fail if accumulator != 0 (not equal to number)
     161/      95 :                     
     162/      95 :                                             ; load 123456789 = 75BCD15H in reverse order in reg 0
     163/      95 : 20 00                       FIM R0R1, 0
     164/      97 : 21                          SRC R0R1        ; Select reg 0, char 0 of RAM chip 0
     165/      98 : D5                          LDM 5
     166/      99 : E0                          WRM
     167/      9A : 61                          INC R1
     168/      9B : 21                          SRC R0R1        ; next character
     169/      9C : D1                          LDM 1
     170/      9D : E0                          WRM
     171/      9E : 61                          INC R1
     172/      9F : 21                          SRC R0R1
     173/      A0 : DD                          LDM 0DH
     174/      A1 : E0                          WRM
     175/      A2 : 61                          INC R1
     176/      A3 : 21                          SRC R0R1
     177/      A4 : DC                          LDM 0CH
     178/      A5 : E0                          WRM
     179/      A6 : 61                          INC R1
     180/      A7 : 21                          SRC R0R1
 AS V1.42 Beta [Bld 246] - Source File multi_digit_arithmetic_test.s - Page 4 - 02-08-23 22:07:20


     181/      A8 : DB                          LDM 0BH
     182/      A9 : E0                          WRM
     183/      AA : 61                          INC R1
     184/      AB : 21                          SRC R0R1
     185/      AC : D5                          LDM 5
     186/      AD : E0                          WRM
     187/      AE : 61                          INC R1
     188/      AF : 21                          SRC R0R1
     189/      B0 : D7                          LDM 7
     190/      B1 : E0                          WRM
     191/      B2 :                     
     192/      B2 : 50 14                       JMS SB          ; 123456789 - 244771 = 123212018 = 75810F2H
     193/      B4 :                     
     194/      B4 : 20 10                       FIM R0R1, 16
     195/      B6 : 21                          SRC R0R1
     196/      B7 : D2                          LDM 2
     197/      B8 : F1                          CLC
     198/      B9 : E8                          SBM
     199/      BA : 1C 02                       JCN 12, FAIL2   ; fail if accumulator != 0 (not equal to number)
     200/      BC :                     
     201/      BC : 61                          INC R1
     202/      BD : 21                          SRC R0R1
     203/      BE : DF                          LDM 0FH
     204/      BF : F1                          CLC
     205/      C0 : E8                          SBM
     206/      C1 : 1C 02                       JCN 12, FAIL2   ; fail if accumulator != 0 (not equal to number)
     207/      C3 :                     
     208/      C3 : 61                          INC R1
     209/      C4 : 21                          SRC R0R1
     210/      C5 : D0                          LDM 0
     211/      C6 : F1                          CLC
     212/      C7 : E8                          SBM
     213/      C8 : 1C 02                       JCN 12, FAIL2   ; fail if accumulator != 0 (not equal to number)
     214/      CA :                     
     215/      CA : 61                          INC R1
     216/      CB : 21                          SRC R0R1
     217/      CC : D1                          LDM 1
     218/      CD : F1                          CLC
     219/      CE : E8                          SBM
     220/      CF : 1C 02                       JCN 12, FAIL2   ; fail if accumulator != 0 (not equal to number)
     221/      D1 :                     
     222/      D1 : 61                          INC R1
     223/      D2 : 21                          SRC R0R1
     224/      D3 : D8                          LDM 8
     225/      D4 : F1                          CLC
     226/      D5 : E8                          SBM
     227/      D6 : 1C 02                       JCN 12, FAIL2   ; fail if accumulator != 0 (not equal to number)
     228/      D8 :                     
     229/      D8 : 61                          INC R1
     230/      D9 : 21                          SRC R0R1
     231/      DA : D5                          LDM 5
     232/      DB : F1                          CLC
     233/      DC : E8                          SBM
     234/      DD : 1C 02                       JCN 12, FAIL2   ; fail if accumulator != 0 (not equal to number)
     235/      DF :                     
     236/      DF : 61                          INC R1
     237/      E0 : 21                          SRC R0R1
     238/      E1 : D7                          LDM 7
     239/      E2 : F1                          CLC
     240/      E3 : E8                          SBM
 AS V1.42 Beta [Bld 246] - Source File multi_digit_arithmetic_test.s - Page 5 - 02-08-23 22:07:20


     241/      E4 : 1C 02                       JCN 12, FAIL2   ; fail if accumulator != 0 (not equal to number)
     242/      E6 :                     
     243/      E6 :                             ; Decimal arithmetic test
     244/      E6 :                                             ; load 333 in reverse order in reg 0
     245/      E6 : 20 00                       FIM R0R1, 0
     246/      E8 : 21                          SRC R0R1        ; Select reg 0, char 0 of RAM chip 0
     247/      E9 : D3                          LDM 3
     248/      EA : E0                          WRM
     249/      EB : 61                          INC R1
     250/      EC : 21                          SRC R0R1        ; next character
     251/      ED : E0                          WRM
     252/      EE : 61                          INC R1
     253/      EF : 21                          SRC R0R1
     254/      F0 : E0                          WRM
     255/      F1 : 61                          INC R1
     256/      F2 : D0                          LDM 0
     257/      F3 : 21                  ADDZ    SRC R0R1
     258/      F4 : E0                          WRM
     259/      F5 : 71 F3                       ISZ R1, ADDZ    ; Keep adding zeros until reg is full
     260/      F7 :                     
     261/      F7 :                                             ; load 884 in reverse order in reg 1
     262/      F7 : 20 10                       FIM R0R1, 16
     263/      F9 : 21                          SRC R0R1        ; Select reg 1, char 0 of RAM chip 0
     264/      FA : D4                          LDM 4
     265/      FB : E0                          WRM
     266/      FC : 61                          INC R1
     267/      FD : 21                          SRC R0R1
     268/      FE : D8                          LDM 8
     269/      FF : E0                          WRM
     270/     100 : 61                          INC R1
     271/     101 : 21                          SRC R0R1
     272/     102 : E0                          WRM
     273/     103 : 61                          INC R1
     274/     104 : D0                          LDM 0
     275/     105 : 21                  ADDZ2   SRC R0R1
     276/     106 : E0                          WRM
     277/     107 : 71 05                       ISZ R1, ADDZ2   ; Keep adding zeros until reg is full
     278/     109 :                     
     279/     109 : 50 26                       JMS ADD         ; 333 + 884 = 1217
     280/     10B :                     
     281/     10B : 20 10                       FIM R0R1, 16
     282/     10D : 21                          SRC R0R1
     283/     10E : D7                          LDM 7
     284/     10F : F1                          CLC
     285/     110 : E8                          SBM
     286/     111 : 1C 6F                       JCN 12, FAIL    ; fail if accumulator != 0 (not equal to number)
     287/     113 :                     
     288/     113 : 61                          INC R1
     289/     114 : 21                          SRC R0R1
     290/     115 : D1                          LDM 1
     291/     116 : F1                          CLC
     292/     117 : E8                          SBM
     293/     118 : 1C 6F                       JCN 12, FAIL    ; fail if accumulator != 0 (not equal to number)
     294/     11A :                     
     295/     11A : 61                          INC R1
     296/     11B : 21                          SRC R0R1
     297/     11C : D2                          LDM 2
     298/     11D : F1                          CLC
     299/     11E : E8                          SBM
     300/     11F : 1C 6F                       JCN 12, FAIL    ; fail if accumulator != 0 (not equal to number)
 AS V1.42 Beta [Bld 246] - Source File multi_digit_arithmetic_test.s - Page 6 - 02-08-23 22:07:20


     301/     121 :                     
     302/     121 : 61                          INC R1
     303/     122 : 21                          SRC R0R1
     304/     123 : D1                          LDM 1
     305/     124 : F1                          CLC
     306/     125 : E8                          SBM
     307/     126 : 1C 6F                       JCN 12, FAIL    ; fail if accumulator != 0 (not equal to number)
     308/     128 :                     
     309/     128 :                     
     310/     128 :                                             ; load 1219 in reverse order in reg 0
     311/     128 : 20 00                       FIM R0R1, 0
     312/     12A : 21                          SRC R0R1        ; Select reg 0, char 0 of RAM chip 0
     313/     12B : D9                          LDM 9
     314/     12C : E0                          WRM
     315/     12D : 61                          INC R1
     316/     12E : 21                          SRC R0R1        ; next character
     317/     12F : D1                          LDM 1
     318/     130 : E0                          WRM
     319/     131 : 61                          INC R1
     320/     132 : 21                          SRC R0R1
     321/     133 : D2                          LDM 2
     322/     134 : E0                          WRM
     323/     135 : 61                          INC R1
     324/     136 : 21                          SRC R0R1
     325/     137 : D1                          LDM 1
     326/     138 : E0                          WRM
     327/     139 :                     
     328/     139 : 50 37                       JMS SBD         ; 1219 - 1217 = 2
     329/     13B :                     
     330/     13B :                                             ; Unlike other functions here the result is stored in reg 0
     331/     13B : 20 00                       FIM R0R1, 0
     332/     13D : 21                          SRC R0R1
     333/     13E : D2                          LDM 2
     334/     13F : F1                          CLC
     335/     140 : E8                          SBM
     336/     141 : 1C 6F                       JCN 12, FAIL    ; fail if accumulator != 0 (not equal to number)
     337/     143 : 41 4C                       JUN SUCC
     338/     145 :                     
     339/     145 :                     ;Put ASCII char stored in R0R1 to designated ROM output port
     340/     145 :                     ;Stores 0 in accumulator
     341/     145 : B0                  PUTC    XCH R0
     342/     146 : E2                          WRR
     343/     147 : B0                          XCH R0
     344/     148 : B1                          XCH R1
     345/     149 : E2                          WRR
     346/     14A : B1                          XCH R1
     347/     14B : C0                          BBL 0
     348/     14C :                     
     349/     14C : 20 00               SUCC    FIM R0R1, 0
     350/     14E : 21                          SRC R0R1       ; Set ROM output port 0
     351/     14F : 20 48                       FIM R0R1, 48H  ; H
     352/     151 : 51 45                       JMS PUTC
     353/     153 : 20 4F                       FIM R0R1, 4FH  ; O
     354/     155 : 51 45                       JMS PUTC
     355/     157 : 51 45                       JMS PUTC       ; O
     356/     159 : 20 52                       FIM R0R1, 52H  ; R
     357/     15B : 51 45                       JMS PUTC
     358/     15D : 20 41                       FIM R0R1, 41H  ; A
     359/     15F : 51 45                       JMS PUTC
     360/     161 : 20 59                       FIM R0R1, 59H  ; Y
 AS V1.42 Beta [Bld 246] - Source File multi_digit_arithmetic_test.s - Page 7 - 02-08-23 22:07:20


     361/     163 : 51 45                       JMS PUTC
     362/     165 : 20 0A                       FIM R0R1, 0AH  ; LF
     363/     167 : 51 45                       JMS PUTC
     364/     169 : 20 00                       FIM R0R1, 0    ; Null termination
     365/     16B : 51 45                       JMS PUTC
     366/     16D : 41 8A                       JUN DONE
     367/     16F :                     
     368/     16F : 20 00               FAIL    FIM R0R1, 0
     369/     171 : 21                          SRC R0R1       ; Set ROM output port 0
     370/     172 : 20 46                       FIM R0R1, 46H  ; F
     371/     174 : 51 45                       JMS PUTC
     372/     176 : 20 41                       FIM R0R1, 41H  ; A
     373/     178 : 51 45                       JMS PUTC
     374/     17A : 20 49                       FIM R0R1, 49H  ; I
     375/     17C : 51 45                       JMS PUTC
     376/     17E : 20 4C                       FIM R0R1, 4CH  ; L
     377/     180 : 51 45                       JMS PUTC
     378/     182 : 20 0A                       FIM R0R1, 0AH  ; LF
     379/     184 : 51 45                       JMS PUTC
     380/     186 : 20 00                       FIM R0R1, 0    ; Null termination
     381/     188 : 51 45                       JMS PUTC
     382/     18A :                     
     383/     18A : 41 8A               DONE    JUN DONE
 AS V1.42 Beta [Bld 246] - Source File multi_digit_arithmetic_test.s - Page 8 - 02-08-23 22:07:20


  Symbol Table (* = unused):
  --------------------------

 AD :                             4 C |  AD1 :                           0A C |
 ADD :                           26 C |  ADD1 :                          2C C |
 ADDZ :                         0F3 C |  ADDZ2 :                        105 C |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
*CASESENSITIVE :                  0 - | *CONSTPI :        3.141592653589793 - |
*DATE :                  "02-08-23" - |  DONE :                         18A C |
 FAIL :                         16F C |  FAIL2 :                          2 C |
*FALSE :                          0 - | *HAS64 :                          1 - |
*LISTON :                         1 - | *MACEXP :                         7 - |
*MOMCPU :                      4004 - | *MOMCPUNAME :                "4004" - |
*NESTMAX :                      100 - |  PUTC :                         145 C |
*RELAXED :                        0 - |  SB :                            14 C |
 SB1 :                           1B C |  SBD :                           37 C |
 SBD1 :                          3E C |  START :                         4B C |
 SUCC :                         14C C | *TIME :                  "22:07:20" - |
*TRUE :                           1 - | *VERSION :                     142F - |

     31 symbols
     15 unused symbols

 AS V1.42 Beta [Bld 246] - Source File multi_digit_arithmetic_test.s - Page 9 - 02-08-23 22:07:20


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.02 seconds assembly time

    383 lines source file
      2 passes
      0 errors
      0 warnings
